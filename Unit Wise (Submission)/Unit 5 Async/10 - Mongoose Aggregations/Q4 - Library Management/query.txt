Task 1: List of books borrowed by each borrower
db.borrowers.aggregate([
  { $lookup: {
      from: "loans",
      localField: "_id",
      foreignField: "borrowerId",
      as: "loans"
  }},
  { $unwind: { path: "$loans", preserveNullAndEmptyArrays: true } },
  { $lookup: {
      from: "books",
      localField: "loans.bookId",
      foreignField: "_id",
      as: "book"
  }},
  { $unwind: { path: "$book", preserveNullAndEmptyArrays: true } },
  { $group: {
      _id: "$_id",
      name: { $first: "$name" },
      books: { $push: { title: "$book.title", bookId: "$book._id", status: "$loans.status", loanDate: "$loans.loanDate" } }
  }},
  { $project: { _id: 0, borrowerId: "$_id", name: 1, books: 1 } }
]);


Task 2: Top 3 most borrowed books
db.loans.aggregate([
  { $group: { _id: "$bookId", borrowCount: { $sum: 1 } } },
  { $lookup: { from: "books", localField: "_id", foreignField: "_id", as: "book" } },
  { $unwind: "$book" },
  { $project: { _id: 0, bookId: "$_id", title: "$book.title", borrowCount: 1 } },
  { $sort: { borrowCount: -1, title: 1 } },
  { $limit: 3 }
]);


Task 3: Borrower’s loan history with book details (borrowerId = User1)
db.loans.aggregate([
  { $match: { borrowerId: "User1" } },
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "book" } },
  { $unwind: "$book" },
  { $project: { _id: 0, loanId: "$_id", bookId: 1, title: "$book.title", author: "$book.author", loanDate: 1, returnDate: 1, status: 1 } },
  { $sort: { loanDate: 1 } }
]);


Task 4: Borrowers who have borrowed more than 2 books
db.loans.aggregate([
  { $group: { _id: "$borrowerId", totalBorrowed: { $sum: 1 } } },
  { $match: { totalBorrowed: { $gt: 2 } } },
  { $lookup: { from: "borrowers", localField: "_id", foreignField: "_id", as: "borrower" } },
  { $unwind: "$borrower" },
  { $project: { _id: 0, borrowerId: "$_id", name: "$borrower.name", email: "$borrower.email", totalBorrowed: 1 } }
]);


Task 5: Full report of all loans (with borrower name and book title)
db.loans.aggregate([
  { $lookup: { from: "borrowers", localField: "borrowerId", foreignField: "_id", as: "borrower" } },
  { $unwind: "$borrower" },
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "book" } },
  { $unwind: "$book" },
  { $project: {
      _id: 0,
      loanId: "$_id",
      borrowerId: 1,
      borrowerName: "$borrower.name",
      bookId: 1,
      bookTitle: "$book.title",
      loanDate: 1,
      returnDate: 1,
      status: 1
  } },
  { $sort: { loanDate: 1 } }
]);


Task 6: Genre-wise count of borrowed books
db.loans.aggregate([
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "book" } },
  { $unwind: "$book" },
  { $group: { _id: "$book.genre", count: { $sum: 1 } } },
  { $project: { _id: 0, genre: "$_id", borrowedCount: "$count" } },
  { $sort: { borrowedCount: -1 } }
]);


Task 7: Current borrowed books (status = “Borrowed”) with borrower and book title
db.loans.aggregate([
  { $match: { status: "Borrowed" } },
  { $lookup: { from: "borrowers", localField: "borrowerId", foreignField: "_id", as: "borrower" } },
  { $unwind: "$borrower" },
  { $lookup: { from: "books", localField: "bookId", foreignField: "_id", as: "book" } },
  { $unwind: "$book" },
  { $project: { _id: 0, loanId: "$_id", borrowerId: 1, borrowerName: "$borrower.name", bookId: 1, bookTitle: "$book.title", loanDate: 1 } },
  { $sort: { loanDate: 1 } }
]);


Task 8: Number of returned books per borrower
db.loans.aggregate([
  { $match: { status: "Returned" } },
  { $group: { _id: "$borrowerId", returnedCount: { $sum: 1 } } },
  { $lookup: { from: "borrowers", localField: "_id", foreignField: "_id", as: "borrower" } },
  { $unwind: "$borrower" },
  { $project: { _id: 0, borrowerId: "$_id", name: "$borrower.name", returnedCount: 1 } }
]);


Task 9: Borrowers who borrowed multiple genres
db.borrowers.aggregate([
  { $lookup: { from: "loans", localField: "_id", foreignField: "borrowerId", as: "loans" } },
  { $unwind: { path: "$loans", preserveNullAndEmptyArrays: true } },
  { $lookup: { from: "books", localField: "loans.bookId", foreignField: "_id", as: "book" } },
  { $unwind: { path: "$book", preserveNullAndEmptyArrays: true } },
  { $group: { _id: "$_id", name: { $first: "$name" }, genres: { $addToSet: "$book.genre" } } },
  { $project: { borrowerId: "$_id", name: 1, genres: 1, genreCount: { $size: "$genres" } } },
  { $match: { genreCount: { $gt: 1 } } }
]);


Task 10: List borrowers with total borrow count and names
db.loans.aggregate([
  { $group: { _id: "$borrowerId", totalBorrowed: { $sum: 1 } } },
  { $lookup: { from: "borrowers", localField: "_id", foreignField: "_id", as: "borrower" } },
  { $unwind: "$borrower" },
  { $project: { _id: 0, borrowerId: "$_id", name: "$borrower.name", totalBorrowed: 1 } },
  { $sort: { totalBorrowed: -1, name: 1 } }
]);
